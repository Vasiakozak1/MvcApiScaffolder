using MvcApiScaffolder.UI;
using Microsoft.AspNet.Scaffolding;
using System.Collections.Generic;
using Microsoft.AspNet.Scaffolding.EntityFramework;
using System.Linq;
using Microsoft.AspNet.Scaffolding.Core.Metadata;
using System;
using System.IO;
using System.Xml;
using MvcApiScaffolder.Utils;
using EnvDTE;

namespace MvcApiScaffolder
{
    public class CustomCodeGenerator : CodeGenerator
    {
        private Project TargetProject;
        CustomViewModel _viewModel;
        private ModelType _entityModelType;
        private string _entityType;
        private Dictionary<string, string> _entityProperties;
        private string _entityKeyType;
        private string _entityKeyName;
        private string _projectUrl;

        /// <summary>
        /// Constructor for the custom code generator
        /// </summary>
        /// <param name="context">Context of the current code generation operation based on how scaffolder was invoked(such as selected project/folder) </param>
        /// <param name="information">Code generation information that is defined in the factory class.</param>
        public CustomCodeGenerator(
            CodeGenerationContext context,
            CodeGeneratorInformation information)
            : base(context, information)
        {
            _viewModel = new CustomViewModel(Context);
        }


        /// <summary>
        /// Any UI to be displayed after the scaffolder has been selected from the Add Scaffold dialog.
        /// Any validation on the input for values in the UI should be completed before returning from this method.
        /// </summary>
        /// <returns></returns>
        public override bool ShowUIAndValidate()
        {
            // Bring up the selection dialog and allow user to select a model type
            SelectModelWindow window = new SelectModelWindow(_viewModel);
            bool? showDialog = window.ShowDialog();
            TargetProject = Context.ActiveProject;
            ProjectBuilder projectBuilder = new ProjectBuilder();
            projectBuilder.BuildProject(Context.ActiveProject);
            GetProjectUrl();
            _entityModelType = window.EntityType.SelectedItem as ModelType;

            var entityModel = window.EntityType.SelectedItem as ModelType;
            var dbContextModel = window.DbContextType.SelectedItem as ModelType;

            IEntityFrameworkService efService = Context.ServiceProvider.GetService(typeof(IEntityFrameworkService)) as IEntityFrameworkService;            
           
            ModelMetadata entityMetadata = efService.AddRequiredEntity(this.Context, dbContextModel.CodeType.FullName, entityModel.TypeName);
            _entityType = _entityModelType.ShortTypeName;
            _entityProperties = new Dictionary<string, string>();
            foreach (var eProperty in entityMetadata.Properties)
            {
                if (eProperty.IsAutoGenerated)
                {
                    continue;
                }
                if (eProperty.IsPrimaryKey)
                {
                    _entityKeyType = eProperty.ShortTypeName;
                    _entityKeyName = eProperty.PropertyName;
                    continue;
                }
                _entityProperties.Add(eProperty.PropertyName, eProperty.ShortTypeName);
            }
            
            return showDialog ?? false; 
        }

        /// <summary>
        /// This method is executed after the ShowUIAndValidate method, and this is where the actual code generation should occur.
        /// In this example, we are generating a new file from t4 template based on the ModelType selected in our UI.
        /// </summary>
        public override void GenerateCode()
        {
            string entityNamespace = _entityModelType.TypeName.Substring(0, _entityModelType.TypeName.LastIndexOf('.'));
            // Setup the scaffolding item creation parameters to be passed into the T4 template.
            var parameters = new Dictionary<string, object>()
            {
                {
                    "EntityType",                    
                    _entityType
                },
                {
                    "ControllerNamespace",
                    TargetProject.GetDefaultNamespace() + ".Controllers"
                },
                {
                    "EntityNamespace",
                    entityNamespace
                },
                {
                    "EntityIdentiferType",
                    _entityKeyType
                },
                {
                    "EntityIdentiferName",
                    _entityKeyName
                }

                //You can pass more parameters after they are defined in the template
            };

            // Add the custom scaffolding item from T4 template.
            this.AddFileFromTemplate(Context.ActiveProject,
                "Controllers\\" + _entityModelType.ShortTypeName + "sController",
                "CustomControllerTemplate",
                parameters,
                skipIfExists: false);

            CreateViews();
        }

        private void CreateViews()
        {
            var viewsPath = "Views\\" + _entityModelType.ShortTypeName + "s\\";

            var indexParameters = new Dictionary<string, object>()
            {
                {
                    "PropertyNames",
                    _entityProperties.Keys.ToArray()
                },
                {
                    "PropertyTypesNames",
                    _entityProperties.Values.ToArray()
                },
                {
                    "EntityName",
                    _entityType
                },
                {
                    "ProjectUrl",
                    _projectUrl
                }
            };
            this.AddFileFromTemplate(TargetProject, viewsPath + "Index",
                "CustomIndex", indexParameters, false);

            var otherPagesParameters = new Dictionary<string, object>()
            {
                {
                    "PropertyNames",
                    _entityProperties.Keys.ToArray()
                },
                {
                    "PropertyTypesNames",
                    _entityProperties.Values.ToArray()
                },
                {
                    "EntityName",
                    _entityType
                },
                {
                    "EntityIdentiferType",
                    _entityKeyType
                },
                {
                    "EntityIdentiferName",
                    _entityKeyName
                },
                {
                    "ProjectUrl",
                    _projectUrl
                }
            };

            this.AddFileFromTemplate(TargetProject,
                viewsPath + "Create", "CustomCreate",
                otherPagesParameters, false);

            this.AddFileFromTemplate(TargetProject,
                viewsPath + "Edit", "CustomEdit",
                otherPagesParameters, false);

            this.AddFileFromTemplate(TargetProject,
                viewsPath + "Details", "CustomDetails",
                otherPagesParameters, false);
        }

        private void GetProjectUrl()
        {
            string targetProjectFilePath = null;
            var path = Context.ActiveProject.GetFullPath();
            DirectoryInfo directory = new DirectoryInfo(path);
            var files = directory.GetFiles();

            try
            {
                targetProjectFilePath = files.First(file => file.Extension == ".csproj").FullName;
            }
            catch (InvalidOperationException e)
            {
                this._projectUrl = "http://localhost:00000/";
                return;
            }

            using (XmlReader reader = XmlReader.Create(targetProjectFilePath))
            {
                while (reader.Read())
                {
                    if (reader.Name == "IISUrl")
                    {
                        reader.Read();
                        this._projectUrl = reader.Value;
                        return;
                    }
                }
            }
        }
    }
}
